// author: wsfuyibing <websearch@163.com>
// date: 2020-01-01

package util

import "context"

type (
    // Catch
    // 捕获回调.
    //
    // 应用于 Catchable 中定义 Panic 回调, 当执行过程中出现 panic 异常时, 隐性触发
    // 此回调.
    Catch func(ctx context.Context, e error) (skipped bool)

    // Catchable
    // 捕获异常操作接口.
    //
    // 模拟 Try/Catch 代码块, 在此调用中使用注册回调的方式运行.
    //
    // [GO]
    //
    //   TryCatch().Panic(
    //       func(ctx context.Context, v interface{}){
    //           println("panic found")
    //       },
    //   ).Before(
    //       func(ctx context.Context) (skipped bool){
    //           println("before 1")
    //           return
    //       },
    //       func(ctx context.Context) (skipped bool){
    //           println("before 2")
    //           return
    //       },
    //   ).Try(
    //       func(ctx context.Context) (skipped bool){
    //           println("try 1")
    //           return
    //       },
    //       func(ctx context.Context) (skipped bool){
    //           println("try 2")
    //           return
    //       },
    //   ).Catch(
    //       func(ctx context.Context, e error) (skipped bool){
    //           println("catch 1")
    //           return
    //       },
    //       func(ctx context.Context, e error) (skipped bool){
    //           println("catch 2")
    //           return
    //       },
    //   ).Finally(
    //      func(ctx context.Context) (skipped bool){
    //           println("finally 1")
    //           return
    //      },
    //      func(ctx context.Context) (skipped bool){
    //           println("finally 2")
    //           return
    //      },
    //   ).Run(ctx)
    //
    // [PHP]
    //
    //   <?php
    //
    //   try{
    //       // ...
    //   } catch(Throwable $e){
    //       // ...
    //   } finally {
    //       // ...
    //   }
    //
    Catchable interface {
        // Before
        // 注册前置回调.
        //
        // 前置回调列表中, 任一回调返回 true, 则忽略已注册的 Try, Catch,
        // Finally 回调(不执行).
        Before(cs ...Ignore) Catchable

        // Catch
        // 注册捕获回调.
        //
        // 当执行 Try 时, 任一回调出现 panic 时, 退出 Try 并立即
        // 触发 Catch. 若整个过程未出现过 panic, 则不执行 Catch.
        Catch(cs ...Catch) Catchable

        // Finally
        // 注册最终回调.
        //
        // 当由 Before() 注册的 Ignore 执行完成后(无 true 返回), Finally
        // 必触发。
        Finally(cs ...Finally) Catchable

        // Identify
        // 返回ID.
        //
        // 返回此实例(来自池)的ID号, 从池中取出次数. 例如 acquires=10, 表示此实例第
        // 10 次从池中取出(复用10次).
        Identify() (id, acquires uint64)

        // Panic
        // 注册异常回调.
        Panic(c Panic) Catchable

        // Run
        // 执行过程.
        //
        // 当返回值为非 nil 时, 表示执行过程中出现 panic.
        Run(ctx context.Context) error

        // Try
        // 注册尝试回调.
        Try(cs ...Try) Catchable
    }

    // Finally
    // 最终回调.
    //
    // 应用于 Catchable 中定义 Finally 回调, 若通过 Before 前置校验, 此回调必然会
    // 隐性触发.
    Finally func(ctx context.Context) (skipped bool)

    // Ignore
    // 可忽略回调.
    //
    // 当返回 true 时, 表示忽略后续的回调. 假设定义了 f1/f2/f3 三个回调, 若 f2 返回
    // true, 由忽略 f3 并直接返回.
    Ignore func(ctx context.Context) (ignored bool)

    // Try
    // 偿试回调.
    //
    // 应用于 Catchable 中定义 Try 回调, 若通过 Before 前置校验, 此回调必然会
    // 隐性触发.
    Try func(ctx context.Context) (skipped bool)

    // Panic
    // 异常回调.
    //
    // 当执行过程中出现 panic 异常时, 隐性触发该回调.
    Panic func(ctx context.Context, v interface{})
)
